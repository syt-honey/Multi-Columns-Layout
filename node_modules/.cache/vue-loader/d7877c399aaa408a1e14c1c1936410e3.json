{"remainingRequest":"/Users/a123/githubRep/Multi-Columns-Layout/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/a123/githubRep/Multi-Columns-Layout/packages/MultiColumnsContainer/src/index.vue?vue&type=style&index=0&id=00e04ebe&scoped=true&lang=css&","dependencies":[{"path":"/Users/a123/githubRep/Multi-Columns-Layout/packages/MultiColumnsContainer/src/index.vue","mtime":1619073786868},{"path":"/Users/a123/githubRep/Multi-Columns-Layout/node_modules/css-loader/dist/cjs.js","mtime":1618913753848},{"path":"/Users/a123/githubRep/Multi-Columns-Layout/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1617162281281},{"path":"/Users/a123/githubRep/Multi-Columns-Layout/node_modules/postcss-loader/src/index.js","mtime":1617162281188},{"path":"/Users/a123/githubRep/Multi-Columns-Layout/node_modules/cache-loader/dist/cjs.js","mtime":1618913751720},{"path":"/Users/a123/githubRep/Multi-Columns-Layout/node_modules/vue-loader/lib/index.js","mtime":1617162281281}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubXVsdGktY29sdW1uLWNvbnRhaW5lciB7CiAgZGlzcGxheTogZ3JpZDsKICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heCgyMDBweCwgMWZyKSk7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"packages/MultiColumnsContainer/src","sourcesContent":["<template>\n  <div\n    class=\"multi-column-container\"\n    :style=\"{\n      'grid-row-gap': rowGap,\n      'grid-column-gap': columnGap,\n      'grid-auto-rows': rowHeight\n    }\"\n  >\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"MultiColumnsContainer\",\n  props: {\n    columnGap: {\n      type: String,\n      default: \"10px\"\n    },\n    rowGap: {\n      type: String,\n      default: \"10px\"\n    },\n    rowHeight: {\n      type: String,\n      default: \"20px\"\n    }\n  },\n  data() {\n    const $$ = sel => document.querySelector(sel);\n    const $$_All = sel => Array.from(document.querySelectorAll(sel));\n\n    const gridContainer = $$('.multi-column-container');\n    // const imgs = $$_All(\"img\");\n    // const gridItems = $$_All(\"grid-item\");\n    // const gridContents = $$_All(\"grid-item--content\");\n\n    return {\n      rowGapInner: \"\",\n      rowHeightInner: \"\"\n    };\n  },\n\n  mounted() {\n    // 获取 container 中的 gap、auto-rows\n    const grid = document.getElementsByClassName(\"multi-column-container\")[0];\n    this.rowGapInner = parseInt(\n      window.getComputedStyle(grid).getPropertyValue(\"grid-row-gap\")\n    );\n    this.rowHeightInner = parseInt(\n      window.getComputedStyle(grid).getPropertyValue(\"grid-auto-rows\")\n    );\n\n    // 查看是否有 img，如果有的话需要等待其加载完才计算高度\n    // TODO 支持更多媒体资源\n    const allImg = document.querySelectorAll(\"img\");\n\n    if (allImg.length) {\n      Array.from(allImg).map((item, index) => {\n        item.addEventListener(\"load\", () => {\n          if (index === allImg.length - 1) {\n            this.positionInit();\n          }\n          item.removeEventListener(\"load\", () => {});\n        });\n      });\n    }\n\n    window.onresize = () => {\n      this.positionInit();\n    };\n  },\n\n  methods: {\n    positionInit() {\n      // TODO 可以优化，如果不是第一次的话，不需要将所有的 items 的位置都重新计算一遍\n      const allItems = document.getElementsByClassName(\"grid-item\");\n      Array.from(allItems).map((item) => {\n        this.setPosition(item);\n      });\n    },\n    setPosition(item) {\n      const content = item.querySelector(\".grid-item--content\");\n      let span = Math.ceil(\n        content.getBoundingClientRect().height /\n          (this.rowHeightInner + this.rowGapInner)\n      );\n      let rowEnd = \"span \" + span;\n      item.style.gridRowEnd = rowEnd;\n    }\n  }\n};\n</script>\n\n\n<style scoped>\n.multi-column-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n}\n</style>\n"]}]}