{"remainingRequest":"/Users/a123/githubRep/Multi-Columns-Layout/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/a123/githubRep/Multi-Columns-Layout/packages/MultiColumnsContainer/src/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/a123/githubRep/Multi-Columns-Layout/packages/MultiColumnsContainer/src/index.vue","mtime":1619073786868},{"path":"/Users/a123/githubRep/Multi-Columns-Layout/node_modules/cache-loader/dist/cjs.js","mtime":1618913751720},{"path":"/Users/a123/githubRep/Multi-Columns-Layout/node_modules/vue-loader/lib/index.js","mtime":1617162281281}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiTXVsdGlDb2x1bW5zQ29udGFpbmVyIiwKICBwcm9wczogewogICAgY29sdW1uR2FwOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogIjEwcHgiCiAgICB9LAogICAgcm93R2FwOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogIjEwcHgiCiAgICB9LAogICAgcm93SGVpZ2h0OiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogIjIwcHgiCiAgICB9CiAgfSwKICBkYXRhKCkgewogICAgY29uc3QgJCQgPSBzZWwgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWwpOwogICAgY29uc3QgJCRfQWxsID0gc2VsID0+IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWwpKTsKCiAgICBjb25zdCBncmlkQ29udGFpbmVyID0gJCQoJy5tdWx0aS1jb2x1bW4tY29udGFpbmVyJyk7CiAgICAvLyBjb25zdCBpbWdzID0gJCRfQWxsKCJpbWciKTsKICAgIC8vIGNvbnN0IGdyaWRJdGVtcyA9ICQkX0FsbCgiZ3JpZC1pdGVtIik7CiAgICAvLyBjb25zdCBncmlkQ29udGVudHMgPSAkJF9BbGwoImdyaWQtaXRlbS0tY29udGVudCIpOwoKICAgIHJldHVybiB7CiAgICAgIHJvd0dhcElubmVyOiAiIiwKICAgICAgcm93SGVpZ2h0SW5uZXI6ICIiCiAgICB9OwogIH0sCgogIG1vdW50ZWQoKSB7CiAgICAvLyDojrflj5YgY29udGFpbmVyIOS4reeahCBnYXDjgIFhdXRvLXJvd3MKICAgIGNvbnN0IGdyaWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJtdWx0aS1jb2x1bW4tY29udGFpbmVyIilbMF07CiAgICB0aGlzLnJvd0dhcElubmVyID0gcGFyc2VJbnQoCiAgICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGdyaWQpLmdldFByb3BlcnR5VmFsdWUoImdyaWQtcm93LWdhcCIpCiAgICApOwogICAgdGhpcy5yb3dIZWlnaHRJbm5lciA9IHBhcnNlSW50KAogICAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShncmlkKS5nZXRQcm9wZXJ0eVZhbHVlKCJncmlkLWF1dG8tcm93cyIpCiAgICApOwoKICAgIC8vIOafpeeci+aYr+WQpuaciSBpbWfvvIzlpoLmnpzmnInnmoTor53pnIDopoHnrYnlvoXlhbbliqDovb3lrozmiY3orqHnrpfpq5jluqYKICAgIC8vIFRPRE8g5pSv5oyB5pu05aSa5aqS5L2T6LWE5rqQCiAgICBjb25zdCBhbGxJbWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCJpbWciKTsKCiAgICBpZiAoYWxsSW1nLmxlbmd0aCkgewogICAgICBBcnJheS5mcm9tKGFsbEltZykubWFwKChpdGVtLCBpbmRleCkgPT4gewogICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsICgpID0+IHsKICAgICAgICAgIGlmIChpbmRleCA9PT0gYWxsSW1nLmxlbmd0aCAtIDEpIHsKICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkluaXQoKTsKICAgICAgICAgIH0KICAgICAgICAgIGl0ZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigibG9hZCIsICgpID0+IHt9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgd2luZG93Lm9ucmVzaXplID0gKCkgPT4gewogICAgICB0aGlzLnBvc2l0aW9uSW5pdCgpOwogICAgfTsKICB9LAoKICBtZXRob2RzOiB7CiAgICBwb3NpdGlvbkluaXQoKSB7CiAgICAgIC8vIFRPRE8g5Y+v5Lul5LyY5YyW77yM5aaC5p6c5LiN5piv56ys5LiA5qyh55qE6K+d77yM5LiN6ZyA6KaB5bCG5omA5pyJ55qEIGl0ZW1zIOeahOS9jee9rumDvemHjeaWsOiuoeeul+S4gOmBjQogICAgICBjb25zdCBhbGxJdGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImdyaWQtaXRlbSIpOwogICAgICBBcnJheS5mcm9tKGFsbEl0ZW1zKS5tYXAoKGl0ZW0pID0+IHsKICAgICAgICB0aGlzLnNldFBvc2l0aW9uKGl0ZW0pOwogICAgICB9KTsKICAgIH0sCiAgICBzZXRQb3NpdGlvbihpdGVtKSB7CiAgICAgIGNvbnN0IGNvbnRlbnQgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoIi5ncmlkLWl0ZW0tLWNvbnRlbnQiKTsKICAgICAgbGV0IHNwYW4gPSBNYXRoLmNlaWwoCiAgICAgICAgY29udGVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgLwogICAgICAgICAgKHRoaXMucm93SGVpZ2h0SW5uZXIgKyB0aGlzLnJvd0dhcElubmVyKQogICAgICApOwogICAgICBsZXQgcm93RW5kID0gInNwYW4gIiArIHNwYW47CiAgICAgIGl0ZW0uc3R5bGUuZ3JpZFJvd0VuZCA9IHJvd0VuZDsKICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"packages/MultiColumnsContainer/src","sourcesContent":["<template>\n  <div\n    class=\"multi-column-container\"\n    :style=\"{\n      'grid-row-gap': rowGap,\n      'grid-column-gap': columnGap,\n      'grid-auto-rows': rowHeight\n    }\"\n  >\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"MultiColumnsContainer\",\n  props: {\n    columnGap: {\n      type: String,\n      default: \"10px\"\n    },\n    rowGap: {\n      type: String,\n      default: \"10px\"\n    },\n    rowHeight: {\n      type: String,\n      default: \"20px\"\n    }\n  },\n  data() {\n    const $$ = sel => document.querySelector(sel);\n    const $$_All = sel => Array.from(document.querySelectorAll(sel));\n\n    const gridContainer = $$('.multi-column-container');\n    // const imgs = $$_All(\"img\");\n    // const gridItems = $$_All(\"grid-item\");\n    // const gridContents = $$_All(\"grid-item--content\");\n\n    return {\n      rowGapInner: \"\",\n      rowHeightInner: \"\"\n    };\n  },\n\n  mounted() {\n    // 获取 container 中的 gap、auto-rows\n    const grid = document.getElementsByClassName(\"multi-column-container\")[0];\n    this.rowGapInner = parseInt(\n      window.getComputedStyle(grid).getPropertyValue(\"grid-row-gap\")\n    );\n    this.rowHeightInner = parseInt(\n      window.getComputedStyle(grid).getPropertyValue(\"grid-auto-rows\")\n    );\n\n    // 查看是否有 img，如果有的话需要等待其加载完才计算高度\n    // TODO 支持更多媒体资源\n    const allImg = document.querySelectorAll(\"img\");\n\n    if (allImg.length) {\n      Array.from(allImg).map((item, index) => {\n        item.addEventListener(\"load\", () => {\n          if (index === allImg.length - 1) {\n            this.positionInit();\n          }\n          item.removeEventListener(\"load\", () => {});\n        });\n      });\n    }\n\n    window.onresize = () => {\n      this.positionInit();\n    };\n  },\n\n  methods: {\n    positionInit() {\n      // TODO 可以优化，如果不是第一次的话，不需要将所有的 items 的位置都重新计算一遍\n      const allItems = document.getElementsByClassName(\"grid-item\");\n      Array.from(allItems).map((item) => {\n        this.setPosition(item);\n      });\n    },\n    setPosition(item) {\n      const content = item.querySelector(\".grid-item--content\");\n      let span = Math.ceil(\n        content.getBoundingClientRect().height /\n          (this.rowHeightInner + this.rowGapInner)\n      );\n      let rowEnd = \"span \" + span;\n      item.style.gridRowEnd = rowEnd;\n    }\n  }\n};\n</script>\n\n\n<style scoped>\n.multi-column-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n}\n</style>\n"]}]}